#!/bin/sh

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)

if [ -e /storage/.please_resize_me ] ; then
  . /usr/lib/libreelec/functions

  hidecursor

  # this sh** was never intended to be used
  # on already installed and runing system
  if [ -d /storage/.kodi -o -d /storage/.config -o -d /storage/.cache ] ; then
    rm -f /storage/.please_resize_me
    sync
    echo "O redimensionamento não é permitido - o sistema já foi inicializado."
    StartProgress countdown "Reiniciando em 15s... " 15 "NOW"
    reboot -f
  fi

  # get the disk. /storage on 2nd partition
  PART=$(grep "/storage " /proc/mounts | cut -d" " -f1 | grep '2$')

  # get disk: /dev/sdx2 -> /dev/sdx, /dev/mmcblkxp2 -> /dev/mmcblkx
  case $PART in
    "/dev/mmcblk"* | "/dev/nvme"*)
      DISK=$(echo $PART | sed s/p2$//g)
      ROMS_PART_NAME="${DISK}p3"
      ;;
    *)
      DISK=$(echo $PART | sed s/2$//g)
      ROMS_PART_NAME="${DISK}3"
      ;;
  esac

  rm -f /storage/.please_resize_me
  sync

  # just in case
  if [ ! -z "$DISK" -a ! -z "$PART" ] ; then
    umount $PART

    DISK_NAME=$(basename $DISK)
    DISK_SECTORS=$(cat "/sys/block/$DISK_NAME/size") # Obtain the disk sectors count, each sector is always 512 Bytes large, independent of the underlying device, according to https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/linux/types.h#n117
    DISK_SIZE=$(( $DISK_SECTORS * 512 )) # Calculate the disk actual size, in byte
    if [ $DISK_SIZE -gt 8589934592 ]; then # The optimal behaviour, this will leave 6GiB to storage, and create the EEROMS partition
      ROMS_CREATE='yes'
      STORAGE_END='8GiB'
    elif [ $DISK_SIZE -gt 3221225472 ]; then  # Optionaly omit the EEROMS partition for 4GB cards/drives
      ROMS_CREATE=''
      ROMS_OMIT_MANUAL=''
      STORAGE_END='100%'
    else
      # The bare minumum a EmuELEC image itself needs is 2186280960, but after adding in user configs things become uncontrollable, so we don't care about disks with size between 2085MiB and 3GiB
      echo 'ERROR: Seu disco é muito pequeno! Você precisa usar uma unidade USB/cartão SD com pelo menos 4 GB!'
      echo 'ERROR: Você NÃO deve tentar inicializar esta unidade, pois ela NÃO foi redimensionada corretamente!'
      StartProgress countdown "Powering off in 30s...     " 30 "NOW"
      poweroff
    fi

    echo "PARTICIONAMENTO EM ANDAMENTO"
    echo ""
    echo "REALOCANDO ESPACO E PROGRAMANDO O VIDEO GAME"
    echo ""
    echo "Por favor NAO reinicie seu NINJABROTHERS RETROBOX!"
    echo ""

    # identify the partition scheme, and if gpt fix minor issues such as gpt header not at end of disk
    SCHEME=$(blkid -s PTTYPE -o value $DISK)
    if [ "$SCHEME" = "gpt" ]; then
      StartProgress spinner "Checking layout...      " "sgdisk -e $DISK &>/dev/null"
    fi
    
    if [ "$ROMS_CREATE" ]; then
      # EmueELEC Get EEROMS filetype
      ROM_FS_TYPE="vfat"
      PARTED_FS_TYPE="fat32"

      if [ -e "/flash/ee_fstype" ]; then
        EE_FS_TYPE=$(cat "/flash/ee_fstype")
        
        case $EE_FS_TYPE in
        "ntfs")
            ROM_FS_TYPE="ntfs"
            PARTED_FS_TYPE="ntfs"
        ;;
        "ext4")
            ROM_FS_TYPE="ext4"
            PARTED_FS_TYPE="ext4"
        ;;
        "exfat")
            ROM_FS_TYPE="exfat"
            PARTED_FS_TYPE="ntfs"
        ;;
        "no")
            ROMS_CREATE=''
            ROMS_OMIT_MANUAL='yes'
            STORAGE_END='100%'
        ;;
        *)
            # Failsafe
            ROM_FS_TYPE="vfat"
            PARTED_FS_TYPE="fat32"
        ;;
        esac    
        
      fi
    fi

    StartProgress spinner "Aumentando particao...   " "parted -s -a optimal -m $DISK resizepart 2 $STORAGE_END &>/dev/null"
    StartProgress spinner "Checando agora........ " "e2fsck -f -p $PART &>/dev/null"
    StartProgress spinner "Aumentando agora...... " "resize2fs $PART &>/dev/null"
    if [ "$ROMS_CREATE" ]; then
      StartProgress spinner "Criando EEROMS particao..." "parted -s -a optimal -m $DISK mkpart primary ${PARTED_FS_TYPE} ${STORAGE_END} 100% &>/dev/null"
      partprobe &>/dev/null
      case $ROM_FS_TYPE in 
        "ntfs")
        StartProgress spinner "Formantando EEROMS particao em NTFS..." "mkfs.ntfs -L EEROMS -f ${ROMS_PART_NAME} &>/dev/null"
        ;;
        "ext4")
        StartProgress spinner "Formantando EEROMS particao em EXT4..." "mkfs.ext4 -L EEROMS -t ext4 -O 64bit ${ROMS_PART_NAME} &>/dev/null"
        ;;
        "exfat")
        StartProgress spinner "Formantando EEROMS particao em EXFAT..." "mkfs.exfat -n EEROMS ${ROMS_PART_NAME} &>/dev/null"
        ;;
        *)
        StartProgress spinner "Formantando EEROMS particao em FAT32..." "mkfs.vfat -n EEROMS ${ROMS_PART_NAME} &>/dev/null"
        ;;
      esac   
    elif [ "$ROMS_OMIT_MANUAL" ]; then
      echo 'ATENCAO!: EEROMS a partição é omitida manualmente, mesmo que o tamanho da sua unidade seja> = 8 GB, VOCE SABE O QUE ESTA FAZENDO'
      mount -o rw,remount /flash
      rm -f /flash/ee_fstype # Mark should be cleaned since the 'no' fstype has no use afterwards
    else
      echo 'ATENCAO!: EEROMS a partição é omitida para unidades <8 GB'
    fi
    StartProgress countdown "Reiniciando em 5 segundos...     " 5 "NOW"
  fi
fi
reboot -f &>/dev/null
